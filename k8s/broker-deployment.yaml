apiVersion: apps/v1
kind: Deployment
metadata:
  name: broker
  labels:
    app: broker
    component: api-service
spec:
  replicas: 4
  selector:
    matchLabels:
      app: broker
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: broker
        component: api-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: broker
        image: market-model-broker:latest
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        env:
        - name: KAFKA_BROKER
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: KAFKA_BROKER
        - name: AGENT_TOPIC
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: AGENT_TOPIC
        - name: INITIAL_CASH
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: INITIAL_CASH
        - name: TELEGRAM_BOT_TOKEN
          valueFrom:
            secretKeyRef:
              name: api-credentials
              key: TELEGRAM_BOT_TOKEN
        - name: FMP_API_KEY
          valueFrom:
            secretKeyRef:
              name: api-credentials
              key: FMP_API_KEY
        - name: USE_DATALAKE
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: USE_DATALAKE
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: LOG_LEVEL
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: api-credentials
              key: JWT_SECRET
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 8001
          name: websocket
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: model-storage
          mountPath: /app/models
        - name: log-volume
          mountPath: /app/logs
      volumes:
      - name: model-storage
        persistentVolumeClaim:
          claimName: broker-models-pvc
      - name: log-volume
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: broker
  labels:
    app: broker
    component: api-service
spec:
  selector:
    app: broker
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  - name: websocket
    port: 8001
    targetPort: 8001
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: broker-models-pvc
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: broker-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - api.market-model.example.com
    secretName: broker-tls
  rules:
  - host: api.market-model.example.com
    http:
      paths:
      - path: /api(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: broker
            port:
              number: 8000
      - path: /ws(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: broker
            port:
              number: 8001
