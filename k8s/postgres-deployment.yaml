apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app: postgres
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: postgres
        component: database
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - name: postgres
        image: postgres:14-alpine
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: POSTGRES_DB
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        ports:
        - name: postgres
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
      - name: postgres-exporter
        image: wrouesnel/postgres_exporter:latest
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@localhost:5432/$(POSTGRES_DB)?sslmode=disable"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: POSTGRES_DB
        ports:
        - name: metrics
          containerPort: 9187
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 50m
            memory: 64Mi
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-init
        configMap:
          name: postgres-init-scripts
      - name: postgres-config
        configMap:
          name: postgres-config

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
data:
  01-create-schema.sql: |
    -- Create tables for market data
    CREATE TABLE IF NOT EXISTS market_data (
      id SERIAL PRIMARY KEY,
      symbol VARCHAR(20) NOT NULL,
      datetime TIMESTAMP NOT NULL,
      open NUMERIC(15,4) NOT NULL,
      high NUMERIC(15,4) NOT NULL,
      low NUMERIC(15,4) NOT NULL,
      close NUMERIC(15,4) NOT NULL,
      volume BIGINT,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      UNIQUE(symbol, datetime)
    );
    
    -- Create indexes
    CREATE INDEX IF NOT EXISTS idx_market_data_symbol ON market_data(symbol);
    CREATE INDEX IF NOT EXISTS idx_market_data_datetime ON market_data(datetime);
    
    -- Create table for predictions
    CREATE TABLE IF NOT EXISTS predictions (
      id SERIAL PRIMARY KEY,
      symbol VARCHAR(20) NOT NULL,
      prediction_date TIMESTAMP NOT NULL,
      predicted_price NUMERIC(15,4) NOT NULL,
      confidence NUMERIC(5,4) NOT NULL,
      model_version VARCHAR(50),
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      UNIQUE(symbol, prediction_date)
    );
    
    -- Create table for trading activity
    CREATE TABLE IF NOT EXISTS trades (
      id SERIAL PRIMARY KEY,
      symbol VARCHAR(20) NOT NULL,
      action VARCHAR(10) NOT NULL,
      quantity INTEGER NOT NULL,
      price NUMERIC(15,4) NOT NULL,
      timestamp TIMESTAMP NOT NULL,
      source VARCHAR(20) NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Create table for model performance
    CREATE TABLE IF NOT EXISTS model_performance (
      id SERIAL PRIMARY KEY,
      symbol VARCHAR(20) NOT NULL,
      model_version VARCHAR(50) NOT NULL,
      mae NUMERIC(15,4) NOT NULL,
      rmse NUMERIC(15,4) NOT NULL,
      r2 NUMERIC(5,4) NOT NULL,
      feature_importance JSONB,
      training_date TIMESTAMP NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

  02-create-functions.sql: |
    -- Function to get historical data with period aggregation
    CREATE OR REPLACE FUNCTION get_historical_data(
      p_symbol VARCHAR,
      p_period VARCHAR,
      p_start_date TIMESTAMP,
      p_end_date TIMESTAMP
    )
    RETURNS TABLE (
      period_start TIMESTAMP,
      open NUMERIC,
      high NUMERIC,
      low NUMERIC,
      close NUMERIC,
      volume BIGINT
    ) AS $$
    BEGIN
      RETURN QUERY
      SELECT
        date_trunc(p_period, datetime) AS period_start,
        first_value(open) OVER w AS open,
        max(high) OVER w AS high,
        min(low) OVER w AS low,
        last_value(close) OVER w AS close,
        sum(volume) OVER w AS volume
      FROM market_data
      WHERE symbol = p_symbol
        AND datetime >= p_start_date
        AND datetime <= p_end_date
      WINDOW w AS (PARTITION BY date_trunc(p_period, datetime) ORDER BY datetime)
      ORDER BY period_start;
    END;
    $$ LANGUAGE plpgsql;

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
data:
  postgresql.conf: |
    # PostgreSQL performance settings
    shared_buffers = 1GB
    work_mem = 64MB
    maintenance_work_mem = 256MB
    effective_cache_size = 3GB
    max_connections = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    max_worker_processes = 8
    max_parallel_workers_per_gather = 4
    max_parallel_workers = 8
    max_wal_size = 1GB
    min_wal_size = 80MB
    checkpoint_timeout = 15min
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    log_min_duration_statement = 1000
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    log_temp_files = 0
    log_autovacuum_min_duration = 250ms
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,remote=%r '
    autovacuum = on
    track_io_timing = on
