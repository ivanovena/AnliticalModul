# Comandos útiles para el proyecto de trading bursátil

# === Configuración Inicial ===

# Preparar el entorno
cp .env.example .env                      # Crear archivo .env a partir del ejemplo
nano .env                                 # Editar variables de entorno (API keys, etc.)
python scripts/verify_environment.py      # Verificar configuración
./scripts/cleanup.sh                      # Limpiar archivos innecesarios

# === Docker Compose ===

# Iniciar todos los servicios
docker-compose up -d

# Ver logs de todos los servicios
docker-compose logs -f

# Ver logs de un servicio específico
docker-compose logs -f broker

# Verificar estado de los contenedores
docker-compose ps

# Reiniciar un servicio específico
docker-compose restart broker

# Detener todos los servicios
docker-compose down

# === Ejecución Manual (sin Docker) ===

# Iniciar todos los servicios
./scripts/run_services.sh start

# Ver estado de los servicios
./scripts/run_services.sh status

# Ver logs de un servicio
./scripts/run_services.sh logs broker

# Detener todos los servicios
./scripts/run_services.sh stop

# === Acceso a Interfaces ===

# Web App:         http://localhost
# API REST:        http://localhost/api
# Grafana:         http://localhost:3000  (usuario: admin, contraseña: admin)
# Prometheus:      http://localhost:9090

# === Endpoints API REST ===

# Obtener portafolio
curl http://localhost/api/portfolio

# Obtener órdenes
curl http://localhost/api/orders

# Colocar una orden (ejemplo)
curl -X POST http://localhost/api/order \
  -H "Content-Type: application/json" \
  -d '{"symbol": "AAPL", "action": "BUY", "quantity": 10, "price": 150.0}'

# Obtener métricas
curl http://localhost/api/metrics

# Chat con IA
curl -X POST http://localhost/api/chat \
  -H "Content-Type: application/json" \
  -d '{"message": "¿Cuál es mi capital actual?"}'

# === Mantenimiento y Depuración ===

# Acceder a la base de datos PostgreSQL
docker-compose exec postgres psql -U market_admin -d market_data

# Verificar topics de Kafka
docker-compose exec kafka kafka-topics.sh --list --bootstrap-server localhost:9092

# Consultar mensajes en un topic de Kafka
docker-compose exec kafka kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic ingestion_events --from-beginning

# Ejecutar pruebas
pytest --cov=services tests/

# === Comandos de Kubernetes (para producción) ===

# Aplicar todas las configuraciones
kubectl apply -f k8s/

# Ver pods en ejecución
kubectl get pods

# Ver logs de un pod
kubectl logs <nombre-del-pod>

# Escalar un servicio
kubectl scale deployment broker --replicas=3
